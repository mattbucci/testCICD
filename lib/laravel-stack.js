"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LaravelStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const codedeploy = require("@aws-cdk/aws-codedeploy");
const apigateway = require("@aws-cdk/aws-apigateway");
const aws_cloudfront_1 = require("@aws-cdk/aws-cloudfront");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
const path = require("path");
const config_1 = require("../config");
class LaravelStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // create a new access point from the filesystem
        const accessPoint = props.efs.addAccessPoint('AccessPoint', {
            // set /export/lambda as the root of the access point
            path: '/',
            createAcl: {
                ownerUid: '1001',
                ownerGid: '1001',
                permissions: '750',
            },
            // enforce the POSIX identity so lambda function will access with this identity
            posixUser: {
                uid: '1001',
                gid: '1001',
            },
        });
        this.lambda = new lambda.Function(this, `Laravel_Lambda`, {
            description: `Generated on: ${new Date().toISOString()}`,
            runtime: lambda.Runtime.PROVIDED,
            handler: 'public/index.php',
            code: lambda.Code.fromAsset(path.resolve(__dirname, `../laravel`), {
                exclude: [
                    'vendor/**',
                    'node_modules/**',
                    'node_modules/.bin/**',
                    'public/assets/**',
                    'public/storage/**',
                    'resources/assets/**',
                    'storage/**',
                    'tests/**',
                ]
            }),
            timeout: cdk.Duration.seconds(28),
            memorySize: 1024,
            vpc: props.vpc,
            vpcSubnets: { subnetType: aws_ec2_1.SubnetType.PRIVATE },
            filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/efs'),
            securityGroups: [props.databaseAccessSecurityGroup, props.efsAccessSecurityGroup],
            layers: [
                lambda.LayerVersion.fromLayerVersionArn(this, 'php-74-fpm', cdk.Arn.format({
                    partition: 'aws',
                    service: 'lambda',
                    account: '209497400698',
                    resource: 'layer',
                    sep: ':',
                    resourceName: 'php-74-fpm:11',
                }, this)),
            ],
            environment: {
                // APP_STORAGE: '/tmp',
                // LOG_CHANNEL: 'stderr',
                // SESSION_DRIVER: 'array',
                // VIEW_COMPILED_PATH: '/tmp/storage/framework/views',
                MY_VARIABLE: 'test',
                WORDPRESS_DB_ENDPOINT: props.rdsEndpoint,
                WORDPRESS_DB_PORT: props.rdsPort,
                WORDPRESS_DB_NAME: props.rdsDb,
                WORDPRESS_DB_USERNAME: props.rdsCredentials.username,
                WORDPRESS_DB_PASSWORD: props.rdsCredentials.secret ? props.rdsCredentials.secret.toString() : '',
            },
        });
        console.log(this.lambda);
        // lambdaversion
        const version = this.lambda.addVersion(new Date().toISOString());
        const alias = new lambda.Alias(this, `${config_1.default.appName}_VersionAlias`, {
            aliasName: 'Prod',
            version,
        });
        console.log('alias');
        console.log(alias);
        // codedeploy
        const temp = new codedeploy.LambdaDeploymentGroup(this, `${config_1.default.appName}_DeploymentGroup`, {
            alias,
            deploymentConfig: codedeploy.LambdaDeploymentConfig.ALL_AT_ONCE,
        });
        console.log('codedeploy');
        console.log(temp);
        // ApiGW
        const apigw = new apigateway.LambdaRestApi(this, `${config_1.default.appName}_APIGateway`, {
            handler: this.lambda,
            proxy: true
        });
        console.log('apigw');
        console.log(apigw);
        // CF
        props.s3.grantRead(props.oai); // must be granted explicitly
        const temp2 = new aws_cloudfront_1.CloudFrontWebDistribution(this, `${config_1.default.appName}_Cloudfront`, {
            defaultRootObject: "index.php",
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: props.s3,
                        originAccessIdentity: props.oai,
                    },
                    behaviors: [
                        {
                            pathPattern: "/public/assets/*"
                        },
                    ]
                },
                {
                    customOriginSource: {
                        domainName: `${apigw.restApiId}.execute-api.${this.region}.${this.urlSuffix}`,
                    },
                    originPath: '/' + apigw.deploymentStage.stageName,
                    behaviors: [{
                            allowedMethods: aws_cloudfront_1.CloudFrontAllowedMethods.ALL,
                            isDefaultBehavior: true,
                            forwardedValues: {
                                queryString: true,
                                cookies: {
                                    forward: 'all'
                                },
                                headers: ['*']
                            },
                            minTtl: cdk.Duration.seconds(0),
                            maxTtl: cdk.Duration.seconds(0),
                            defaultTtl: cdk.Duration.seconds(0),
                        }]
                }
            ],
            enableIpV6: true,
        });
        console.log('cloudfront');
        console.log(temp2);
    }
}
exports.LaravelStack = LaravelStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFyYXZlbC1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxhcmF2ZWwtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQXFDO0FBQ3JDLDhDQUE4QztBQUM5QyxzREFBc0Q7QUFDdEQsc0RBQXNEO0FBQ3RELDREQUFtSDtBQUVuSCw4Q0FBNkU7QUFFN0UsNkJBQTZCO0FBSTdCLHNDQUErQjtBQWdCL0IsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFJdkMsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUE0QjtRQUN0RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixnREFBZ0Q7UUFDaEQsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFO1lBQ3hELHFEQUFxRDtZQUNyRCxJQUFJLEVBQUUsR0FBRztZQUNULFNBQVMsRUFBRTtnQkFDUCxRQUFRLEVBQUUsTUFBTTtnQkFDaEIsUUFBUSxFQUFFLE1BQU07Z0JBQ2hCLFdBQVcsRUFBRSxLQUFLO2FBQ3JCO1lBQ0QsK0VBQStFO1lBQy9FLFNBQVMsRUFBRTtnQkFDUCxHQUFHLEVBQUUsTUFBTTtnQkFDWCxHQUFHLEVBQUUsTUFBTTthQUNkO1NBQ0osQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFO1lBQ3RELFdBQVcsRUFBRSxpQkFBaUIsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN4RCxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRO1lBQ2hDLE9BQU8sRUFBRSxrQkFBa0I7WUFDM0IsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFlBQVks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UUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7NEJBQy9CLE1BQU0sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7NEJBQy9CLFVBQVUsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7eUJBQ3RDLENBQUM7aUJBQ0w7YUFDSjtZQUNELFVBQVUsRUFBRSxJQUFJO1NBQ25CLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDO0NBQ0o7QUE1SUQsb0NBNElDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gXCJAYXdzLWNkay9jb3JlXCI7XG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSBcIkBhd3MtY2RrL2F3cy1sYW1iZGFcIjtcbmltcG9ydCAqIGFzIGNvZGVkZXBsb3kgZnJvbSBcIkBhd3MtY2RrL2F3cy1jb2RlZGVwbG95XCI7XG5pbXBvcnQgKiBhcyBhcGlnYXRld2F5IGZyb20gXCJAYXdzLWNkay9hd3MtYXBpZ2F0ZXdheVwiO1xuaW1wb3J0IHsgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbiwgT3JpZ2luQWNjZXNzSWRlbnRpdHksIENsb3VkRnJvbnRBbGxvd2VkTWV0aG9kcyB9IGZyb20gXCJAYXdzLWNkay9hd3MtY2xvdWRmcm9udFwiXG5pbXBvcnQgeyBJU2VjcmV0IH0gZnJvbSAnQGF3cy1jZGsvYXdzLXNlY3JldHNtYW5hZ2VyJztcbmltcG9ydCB7IFBlZXIsIFBvcnQsIFNlY3VyaXR5R3JvdXAsIFN1Ym5ldFR5cGUsIFZwYyB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1lYzInXG5pbXBvcnQgeyBDcmVkZW50aWFscyB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1yZHMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgczMgZnJvbSBcIkBhd3MtY2RrL2F3cy1zM1wiO1xuaW1wb3J0ICogYXMgZWZzIGZyb20gJ0Bhd3MtY2RrL2F3cy1lZnMnO1xuaW1wb3J0IHsgTGFtYmRhQXBwbGljYXRpb24gfSBmcm9tIFwiQGF3cy1jZGsvYXdzLWNvZGVkZXBsb3lcIjtcbmltcG9ydCBjb25maWcgZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IEF3cyB9IGZyb20gXCJAYXdzLWNkay9jb3JlXCI7XG5cbmludGVyZmFjZSBBcHBsaWNhdGlvblN0YWNrUHJvcHMgZXh0ZW5kcyBjZGsuU3RhY2tQcm9wcyB7XG4gICAgdnBjOiBWcGM7XG4gICAgZGF0YWJhc2VBY2Nlc3NTZWN1cml0eUdyb3VwOiBTZWN1cml0eUdyb3VwXG4gICAgZWZzQWNjZXNzU2VjdXJpdHlHcm91cDogU2VjdXJpdHlHcm91cFxuICAgIHJkc0VuZHBvaW50OiBzdHJpbmdcbiAgICByZHNEYjogc3RyaW5nXG4gICAgcmRzUG9ydDogc3RyaW5nLFxuICAgIHJkc0NyZWRlbnRpYWxzOiBDcmVkZW50aWFscyxcbiAgICBlZnM6IGVmcy5GaWxlU3lzdGVtXG4gICAgczM6IHMzLkJ1Y2tldFxuICAgIG9haTogT3JpZ2luQWNjZXNzSWRlbnRpdHlcbn1cblxuZXhwb3J0IGNsYXNzIExhcmF2ZWxTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gICAgcmVhZG9ubHkgbGFtYmRhOiBsYW1iZGEuRnVuY3Rpb247XG4gICAgcmVhZG9ubHkgY2xvdWRmcm9udDogQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQXBwbGljYXRpb25TdGFja1Byb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBhIG5ldyBhY2Nlc3MgcG9pbnQgZnJvbSB0aGUgZmlsZXN5c3RlbVxuICAgICAgICBjb25zdCBhY2Nlc3NQb2ludCA9IHByb3BzLmVmcy5hZGRBY2Nlc3NQb2ludCgnQWNjZXNzUG9pbnQnLCB7XG4gICAgICAgICAgICAvLyBzZXQgL2V4cG9ydC9sYW1iZGEgYXMgdGhlIHJvb3Qgb2YgdGhlIGFjY2VzcyBwb2ludFxuICAgICAgICAgICAgcGF0aDogJy8nLFxuICAgICAgICAgICAgY3JlYXRlQWNsOiB7XG4gICAgICAgICAgICAgICAgb3duZXJVaWQ6ICcxMDAxJyxcbiAgICAgICAgICAgICAgICBvd25lckdpZDogJzEwMDEnLFxuICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zOiAnNzUwJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBlbmZvcmNlIHRoZSBQT1NJWCBpZGVudGl0eSBzbyBsYW1iZGEgZnVuY3Rpb24gd2lsbCBhY2Nlc3Mgd2l0aCB0aGlzIGlkZW50aXR5XG4gICAgICAgICAgICBwb3NpeFVzZXI6IHtcbiAgICAgICAgICAgICAgICB1aWQ6ICcxMDAxJyxcbiAgICAgICAgICAgICAgICBnaWQ6ICcxMDAxJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubGFtYmRhID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBgTGFyYXZlbF9MYW1iZGFgLCB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYEdlbmVyYXRlZCBvbjogJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YCxcbiAgICAgICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLlBST1ZJREVELFxuICAgICAgICAgICAgaGFuZGxlcjogJ3B1YmxpYy9pbmRleC5waHAnLFxuICAgICAgICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIGAuLi9sYXJhdmVsYCksIHtcbiAgICAgICAgICAgICAgICBleGNsdWRlOiBbXG4gICAgICAgICAgICAgICAgICAgICd2ZW5kb3IvKionLFxuICAgICAgICAgICAgICAgICAgICAnbm9kZV9tb2R1bGVzLyoqJyxcbiAgICAgICAgICAgICAgICAgICAgJ25vZGVfbW9kdWxlcy8uYmluLyoqJyxcbiAgICAgICAgICAgICAgICAgICAgJ3B1YmxpYy9hc3NldHMvKionLFxuICAgICAgICAgICAgICAgICAgICAncHVibGljL3N0b3JhZ2UvKionLFxuICAgICAgICAgICAgICAgICAgICAncmVzb3VyY2VzL2Fzc2V0cy8qKicsXG4gICAgICAgICAgICAgICAgICAgICdzdG9yYWdlLyoqJyxcbiAgICAgICAgICAgICAgICAgICAgJ3Rlc3RzLyoqJyxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDI4KSxcbiAgICAgICAgICAgIG1lbW9yeVNpemU6IDEwMjQsXG4gICAgICAgICAgICB2cGM6IHByb3BzLnZwYyxcbiAgICAgICAgICAgIHZwY1N1Ym5ldHM6IHsgc3VibmV0VHlwZTogU3VibmV0VHlwZS5QUklWQVRFIH0sXG4gICAgICAgICAgICBmaWxlc3lzdGVtOiBsYW1iZGEuRmlsZVN5c3RlbS5mcm9tRWZzQWNjZXNzUG9pbnQoYWNjZXNzUG9pbnQsICcvbW50L2VmcycpLFxuICAgICAgICAgICAgc2VjdXJpdHlHcm91cHM6IFtwcm9wcy5kYXRhYmFzZUFjY2Vzc1NlY3VyaXR5R3JvdXAsIHByb3BzLmVmc0FjY2Vzc1NlY3VyaXR5R3JvdXBdLFxuICAgICAgICAgICAgbGF5ZXJzOiBbXG4gICAgICAgICAgICAgICAgbGFtYmRhLkxheWVyVmVyc2lvbi5mcm9tTGF5ZXJWZXJzaW9uQXJuKHRoaXMsICdwaHAtNzQtZnBtJywgY2RrLkFybi5mb3JtYXQoe1xuICAgICAgICAgICAgICAgICAgICBwYXJ0aXRpb246ICdhd3MnLFxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlOiAnbGFtYmRhJyxcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudDogJzIwOTQ5NzQwMDY5OCcsIC8vIHRoZSBicmVmLnNoIGFjY291bnRcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6ICdsYXllcicsXG4gICAgICAgICAgICAgICAgICAgIHNlcDogJzonLFxuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6ICdwaHAtNzQtZnBtOjExJyxcbiAgICAgICAgICAgICAgICB9LCB0aGlzKSksXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHsgLy8gd2lsbCBwcm9iYWJseSB1c2UgdGhlc2UgZm9yIGxhcmF2ZWwgdG9vXG4gICAgICAgICAgICAgICAgLy8gQVBQX1NUT1JBR0U6ICcvdG1wJyxcbiAgICAgICAgICAgICAgICAvLyBMT0dfQ0hBTk5FTDogJ3N0ZGVycicsXG4gICAgICAgICAgICAgICAgLy8gU0VTU0lPTl9EUklWRVI6ICdhcnJheScsXG4gICAgICAgICAgICAgICAgLy8gVklFV19DT01QSUxFRF9QQVRIOiAnL3RtcC9zdG9yYWdlL2ZyYW1ld29yay92aWV3cycsXG4gICAgICAgICAgICAgICAgTVlfVkFSSUFCTEU6ICd0ZXN0JyxcbiAgICAgICAgICAgICAgICBXT1JEUFJFU1NfREJfRU5EUE9JTlQ6IHByb3BzLnJkc0VuZHBvaW50LFxuICAgICAgICAgICAgICAgIFdPUkRQUkVTU19EQl9QT1JUOiBwcm9wcy5yZHNQb3J0LFxuICAgICAgICAgICAgICAgIFdPUkRQUkVTU19EQl9OQU1FOiBwcm9wcy5yZHNEYixcbiAgICAgICAgICAgICAgICBXT1JEUFJFU1NfREJfVVNFUk5BTUU6IHByb3BzLnJkc0NyZWRlbnRpYWxzLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgIFdPUkRQUkVTU19EQl9QQVNTV09SRDogcHJvcHMucmRzQ3JlZGVudGlhbHMuc2VjcmV0ID8gcHJvcHMucmRzQ3JlZGVudGlhbHMuc2VjcmV0LnRvU3RyaW5nKCkgOiAnJywgLy8gZW1wdHkgc3RyaW5nIG1pZ2h0IGJlIHdyb25nIGhlcmVcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmxhbWJkYSk7XG5cbiAgICAgICAgLy8gbGFtYmRhdmVyc2lvblxuICAgICAgICBjb25zdCB2ZXJzaW9uID0gdGhpcy5sYW1iZGEuYWRkVmVyc2lvbihuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkpO1xuICAgICAgICBjb25zdCBhbGlhcyA9IG5ldyBsYW1iZGEuQWxpYXModGhpcywgYCR7Y29uZmlnLmFwcE5hbWV9X1ZlcnNpb25BbGlhc2AsIHtcbiAgICAgICAgICAgIGFsaWFzTmFtZTogJ1Byb2QnLFxuICAgICAgICAgICAgdmVyc2lvbixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ2FsaWFzJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGFsaWFzKTtcblxuICAgICAgICAvLyBjb2RlZGVwbG95XG4gICAgICAgIGNvbnN0IHRlbXAgPSBuZXcgY29kZWRlcGxveS5MYW1iZGFEZXBsb3ltZW50R3JvdXAodGhpcywgYCR7Y29uZmlnLmFwcE5hbWV9X0RlcGxveW1lbnRHcm91cGAsIHtcbiAgICAgICAgICAgIGFsaWFzLFxuICAgICAgICAgICAgZGVwbG95bWVudENvbmZpZzogY29kZWRlcGxveS5MYW1iZGFEZXBsb3ltZW50Q29uZmlnLkFMTF9BVF9PTkNFLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zb2xlLmxvZygnY29kZWRlcGxveScpO1xuICAgICAgICBjb25zb2xlLmxvZyh0ZW1wKVxuXG4gICAgICAgIC8vIEFwaUdXXG4gICAgICAgIGNvbnN0IGFwaWd3ID0gbmV3IGFwaWdhdGV3YXkuTGFtYmRhUmVzdEFwaSh0aGlzLCBgJHtjb25maWcuYXBwTmFtZX1fQVBJR2F0ZXdheWAsIHtcbiAgICAgICAgICAgIGhhbmRsZXI6IHRoaXMubGFtYmRhLFxuICAgICAgICAgICAgcHJveHk6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ2FwaWd3Jyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGFwaWd3KTtcblxuICAgICAgICAvLyBDRlxuICAgICAgICBwcm9wcy5zMy5ncmFudFJlYWQocHJvcHMub2FpKTsgLy8gbXVzdCBiZSBncmFudGVkIGV4cGxpY2l0bHlcbiAgICAgICAgY29uc3QgdGVtcDIgPSBuZXcgQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbih0aGlzLCBgJHtjb25maWcuYXBwTmFtZX1fQ2xvdWRmcm9udGAsIHtcbiAgICAgICAgICAgIGRlZmF1bHRSb290T2JqZWN0OiBcImluZGV4LnBocFwiLFxuICAgICAgICAgICAgb3JpZ2luQ29uZmlnczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgczNPcmlnaW5Tb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMzQnVja2V0U291cmNlOiBwcm9wcy5zMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbkFjY2Vzc0lkZW50aXR5OiBwcm9wcy5vYWksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGJlaGF2aW9yczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhQYXR0ZXJuOiBcIi9wdWJsaWMvYXNzZXRzLypcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjdXN0b21PcmlnaW5Tb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbWFpbk5hbWU6IGAke2FwaWd3LnJlc3RBcGlJZH0uZXhlY3V0ZS1hcGkuJHt0aGlzLnJlZ2lvbn0uJHt0aGlzLnVybFN1ZmZpeH1gLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5QYXRoOiAnLycgKyBhcGlndy5kZXBsb3ltZW50U3RhZ2Uuc3RhZ2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICBiZWhhdmlvcnM6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2VkTWV0aG9kczogQ2xvdWRGcm9udEFsbG93ZWRNZXRob2RzLkFMTCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yd2FyZGVkVmFsdWVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlTdHJpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3J3YXJkOiAnYWxsJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogWycqJ11cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5UdGw6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4VHRsOiBjZGsuRHVyYXRpb24uc2Vjb25kcygwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRUdGw6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDApLFxuICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBlbmFibGVJcFY2OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2coJ2Nsb3VkZnJvbnQnKTtcbiAgICAgICAgY29uc29sZS5sb2codGVtcDIpO1xuICAgIH1cbn1cbiJdfQ==